<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Nest Dashboard - Edit Product</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" type="image/x-icon" href="/images/admin/imgs/theme/favicon.svg">
    <link href="/styles/admin/css/main.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Cropper.js CSS and JS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <style>
        #image-crop-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .crop-modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
        }

        #image-to-crop {
            max-width: 100%;
            max-height: 500px;
        }

        .image-upload-info {
            color: #6c757d;
            margin-bottom: 10px;
        }

        .existing-image {
            position: relative;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .existing-image img {
            max-width: 150px;
            max-height: 150px;
            object-fit: cover;
        }

        .remove-existing-image {
            position: absolute;
            top: 0;
            right: 0;
        }
    </style>
</head>

<body>
    <%- include("partials/header")%>

        <section class="content-main">
            <form id="product-edit-form">
                <input type="hidden" id="product-id" name="productId" value="<%= product._id %>">

                <div class="row">
                    <div class="col-6">
                        <div class="content-header">
                            <h2 class="content-title">Edit Product</h2>
                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Update
                                    Product</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-6">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>1. General info</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label" for="title">Product title <span
                                                    class="text-danger">*</span></label>
                                            <input type="text" id="product-title" name="title" placeholder="Type here"
                                                class="form-control" value="<%= product.productName %>" required>
                                            <small class="text-danger" id="title-error"></small>
                                        </div>
                                        <div class="mb-4">
                                            <label class="form-label" for="description">Description <span
                                                    class="text-danger">*</span></label>
                                            <textarea id="product-description" name="description"
                                                placeholder="Type here" class="form-control" rows="4"
                                                required><%= product.description %></textarea>
                                            <small class="text-danger" id="description-error"></small>
                                        </div>
                                    </div>
                                </div>

                                <hr class="mb-4 mt-0">

                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>2. Pricing</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Regular Price in $ <span
                                                    class="text-danger">*</span></label>
                                            <input type="number" id="regular-price" name="regularPrice"
                                                placeholder="$00.0" class="form-control" min="0" step="0.01"
                                                value="<%= product.regularPrice %>" required>
                                            <small class="text-danger" id="regularPrice-error"></small>
                                        </div>
                                        <div class="mb-4">
                                            <label class="form-label">Sale Price <span
                                                    class="text-danger">*</span></label>
                                            <input type="number" id="sale-price" name="salePrice" placeholder="$00.0"
                                                class="form-control" min="0" step="0.01"
                                                value="<%= product.salePrice %>" required>
                                            <small class="text-danger" id="salePrice-error"></small>
                                        </div>
                                    </div>
                                </div>

                                <!-- offer addiing -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>3. Product Offer</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Product Offer in % </label>
                                            <input type="number" id="productOffer" name="productOffer" placeholder="0 %"
                                                class="form-control" min="0" max="100" step="0.01"
                                                value="<%= product.productOffer %>" >
                                            <small class="text-danger" id="productOffer-error"></small>
                                        </div>

                                    </div>
                                </div>

                                <!--  -->

                                <hr class="mb-4 mt-0">

                                <!-- Size and Quantity Addition -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>4. Size and Quantity</h6>
                                    </div>

                                    <hr class="mb-4 mt-0">

                                    <!-- Size 6 -->
                                    <div class="mb-4">

                                        <input type="text" name="sizes[]" placeholder="size 6" class="form-control"
                                            value="6" min="0" disabled>
                                        <input type="number" id="size-six" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" value="<%=product.stock[0].quantity%>"
                                            required>
                                        <small class="text-danger" id="quantity-error-size-six"></small>
                                    </div>

                                    <!-- Size 7 -->
                                    <div class="mb-4">
                                        <!-- <label class="form-label">Size 7 <span class="text-danger">*</span></label> -->
                                        <input type="text" name="sizes[]" class="form-control" value="7" min="0"
                                            disabled>
                                        <input type="number" id="size-seven" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" value="<%=product.stock[1].quantity%>"
                                            required>
                                        <small class="text-danger" id="quantity-error-size-seven"></small>
                                    </div>

                                    <!-- Size 8 -->
                                    <div class="mb-4">
                                        <input type="number" name="sizes[]" class="form-control" value="8" min="0"
                                            disabled>
                                        <input type="number" id="size-eight" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" value="<%=product.stock[2].quantity%>"
                                            required>
                                        <small class="text-danger" id="quantity-error-size-eight"></small>
                                    </div>

                                    <!-- Size 9 -->
                                    <div class="mb-4">
                                        <input type="number" name="sizes[]" class="form-control" value="9" min="0"
                                            disabled>
                                        <input type="number" id="size-nine" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" value="<%=product.stock[3].quantity%>"
                                            required>
                                        <small class="text-danger" id="quantity-error-size-nine"></small>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>5. Category</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <div class="row">
                                                <% categories.forEach((category)=> { %>
                                                    <div class="col-6 col-md-4 mb-2">
                                                        <label class="form-check">
                                                            <input class="form-check-input" type="radio" name="category"
                                                                value="<%= category._id %>"
                                                                <%=product.category.toString()===category._id.toString()
                                                                ? 'checked' : '' %>
                                                            required>
                                                            <span class="form-check-label">
                                                                <%= category.name %>
                                                            </span>
                                                        </label>
                                                    </div>
                                                    <% }); %>
                                            </div>
                                            <small class="text-danger" id="category-error"></small>
                                        </div>
                                    </div>
                                </div>

                                <hr class="mb-4 mt-0">

                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>6. Media</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Existing Images</label>
                                            <div id="existing-images-container" class="d-flex flex-wrap mb-3">
                                                <% product.productImage.forEach((image, index)=> { %>
                                                    <div class="existing-image position-relative">
                                                        <img src="<%= image %>" alt="Product Image <%= index + 1 %>">
                                                        <button type="button"
                                                            class="btn btn-sm btn-danger remove-existing-image"
                                                            data-image-index="<%=index%>">×</button>
                                                    </div>
                                                    <% }); %>
                                            </div>

                                            <label class="form-label">Add New Images</label>
                                            <div class="image-upload-info">
                                                Please upload additional images. Maximum 5 images total.
                                            </div>
                                            <input id="product-images" name="images" class="form-control" type="file"
                                                accept="image/*" multiple>
                                            <div id="preview-container" class="mt-3 d-flex flex-wrap"></div>
                                            <small class="text-danger" id="images-error"></small>


                                        </div>



                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </form>
        </section>

        <!-- Image Crop Modal -->
        <div id="image-crop-modal">
            <div class="crop-modal-content">
                <h3>Crop Image</h3>
                <img id="image-to-crop">
                <div class="mt-3">
                    <button id="crop-save-btn" class="btn btn-primary">Save Crop</button>
                    <button id="crop-cancel-btn" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>

        <%- include("partials/footer")%>

            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    const productEditForm = document.getElementById("product-edit-form");
                    const productImagesInput = document.getElementById("product-images");
                    const previewContainer = document.getElementById("preview-container");
                    const existingImagesContainer = document.getElementById("existing-images-container");
                    const cropModal = document.getElementById("image-crop-modal");
                    const imageToCrop = document.getElementById("image-to-crop");
                    const cropSaveBtn = document.getElementById("crop-save-btn");
                    const cropCancelBtn = document.getElementById("crop-cancel-btn");

                    let cropper = null;
                    // Global variable to store cropped files
                    let croppedFiles = [];

                    productImagesInput.addEventListener("change", (e) => {
                        const files = Array.from(e.target.files);
                        // croppedFiles = []; // Reset cropped files
                        // previewContainer.innerHTML = ""; // Clear previous previews

                        if (files.length > 0) {
                            productImagesInput.value = '';
                            files.forEach((file, index) => {
                                const reader = new FileReader();
                                reader.onload = (event) => {
                                    // Show crop modal for each image
                                    imageToCrop.src = event.target.result;
                                    cropModal.style.display = "block";

                                    // Reinitialize cropper
                                    if (cropper) cropper.destroy();
                                    cropper = new Cropper(imageToCrop, {
                                        aspectRatio: 1,
                                        viewMode: 1,
                                    });

                                    // Store original file with cropper for reference
                                    cropper.originalFile = file;
                                };
                                reader.readAsDataURL(file);
                            });
                        }
                    });



                    // Remove existing image
                    existingImagesContainer.addEventListener("click", async (e) => {

                        if (e.target.classList.contains("remove-existing-image")) {

                            const imageIndex = e.target.dataset.imageIndex;
                            const _id = `<%=product._id%>`

                            const response = await fetch("/admin/deleteImg", {
                                method: "POST",
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ imageIndex, _id })
                            })

                            const data = await response.json();
                            if (data.success) {

                                Swal.fire({
                                    icon: 'success',
                                    title: 'success',
                                    text: data.message,
                                }).then(() => {
                                    //remove the image
                                    e.target.parentElement.remove();
                                })

                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'error',
                                    text: data.message,
                                });
                            }

                            //remove the image
                            e.target.parentElement.remove();
                        }







                    });

                    // Handle image cropping
                    cropModal.addEventListener("click", (e) => {
                        if (e.target === cropModal) cropModal.style.display = "none";
                    });

                    //crop save button handeler
                    cropSaveBtn.addEventListener("click", () => {
                        cropper.getCroppedCanvas().toBlob((blob) => {
                            const croppedFile = new File([blob], `cropped-${cropper.originalFile.name}`, {
                                type: "image/png"
                            });

                            croppedFiles.push(croppedFile);



                            // Preview the cropped image
                            const img = document.createElement("img");
                            img.src = URL.createObjectURL(blob);
                            img.style.maxWidth = "150px";
                            img.style.maxHeight = "150px";
                            img.style.marginRight = "10px";
                            previewContainer.appendChild(img);

                            cropModal.style.display = "none";
                            cropper.destroy();
                        });
                    });

                    //crop cancell;
                    cropCancelBtn.addEventListener("click", () => {
                        cropModal.style.display = "none";
                        cropper.destroy();
                    });

                    // Submit form
                    productEditForm.addEventListener("submit", async (e) => {
                        e.preventDefault();
                        const isValid = validateProductForm();


                        const formData = new FormData(productEditForm);

                        // Append cropped files to FormData
                        croppedFiles.forEach((file, index) => {
                            formData.append('images', file, file.name);
                        });


                        if (isValid) {



                            //fetching the sizes
                            const sizes = Array.from(
                                document.querySelectorAll('input[name="sizes[]"]'),
                                input => input.value
                            );

                            //fetching the quantities                        
                            const quantities = Array.from(
                                document.querySelectorAll('input[name="quantities[]"]'),
                                input => input.value
                            );

                            //defining stock retrieving fnction
                            const stockMaker = (sizes, quantities) => {
                                let stock = []
                                for (let size of sizes) {
                                    let obj = {
                                        size: size,
                                        quantity: quantities[sizes.indexOf(size)]
                                    }
                                    stock.push(obj);
                                }
                                return stock;
                            }

                            //define the stock array
                            const stock = stockMaker(sizes, quantities)

                            //stringify the stcok array
                            const stockJson = JSON.stringify(stock);

                            //append the stock arry to formData
                            formData.append('stock', stockJson);

                            //fetch logic

                            const response = await fetch(`/admin/editProduct`, {
                                method: "POST",
                                body: formData,
                            });

                            const result = await response.json();


                            if (result.success) {
                                Swal.fire("Success", "Product updated successfully!", "success").then(() => {
                                    // window.location.reload();
                                    productEditForm.reset()
                                });
                            } else {
                                Swal.fire("Error", result.message || "Failed to update product.", "error");
                            }



                        } else {

                            Swal.fire("Error", "validation Error");

                        }


                    });
                });



                //validator functtion

                function validateProductForm() {
                    // Get form elements
                    const title = document.getElementById('product-title');
                    const description = document.getElementById('product-description');
                    const regularPrice = document.getElementById('regular-price');
                    const salePrice = document.getElementById('sale-price');
                    const categories = document.querySelectorAll('input[name="category"]');
                    const images = document.getElementById('product-images');
                    const productOffer = document.getElementById('productOffer');

                    // Error elements
                    const titleError = document.getElementById('title-error');
                    const descriptionError = document.getElementById('description-error');
                    const regularPriceError = document.getElementById('regularPrice-error');
                    const salePriceError = document.getElementById('salePrice-error');
                    const categoryError = document.getElementById('category-error');
                    const imagesError = document.getElementById('images-error');
                    const productOfferError = document.getElementById('productOffer-error');

                    // Validation flags
                    let isValid = true;

                    // Clear previous error messages
                    [titleError, descriptionError, regularPriceError,
                        salePriceError, categoryError, imagesError].forEach(el => el.textContent = '');

                    // Validate Title
                    if (!title.value.trim()) {
                        titleError.textContent = 'Product title is required';
                        isValid = false;
                    }
                    // validate offer percentage
                    if (productOffer.value < 0 || productOffer.value > 100) {
                        productOfferError.textContent = `offer cannot be ${productOffer.value < 0 ? 'less than zero' : 'greater than 100'}`
                        isValid = false
                    }

                    // Validate Description
                    if (!description.value.trim()) {
                        descriptionError.textContent = 'Description is required';
                        isValid = false;
                    }

                    // Validate Regular Price
                    if (!regularPrice.value || parseFloat(regularPrice.value) < 0) {
                        regularPriceError.textContent = 'Valid regular price is required';
                        isValid = false;
                    }

                    // Validate Sale Price
                    if (!salePrice.value || parseFloat(salePrice.value) < 0) {
                        salePriceError.textContent = 'Valid sale price is required';
                        isValid = false;
                    }

                    // Validate Sale Price vs Regular Price
                    if (parseFloat(salePrice.value) > parseFloat(regularPrice.value)) {
                        salePriceError.textContent = 'Sale price cannot be higher than regular price';
                        isValid = false;
                    }

                    // Validate Category
                    const categorySelected = Array.from(categories).some(radio => radio.checked);
                    if (!categorySelected) {
                        categoryError.textContent = 'Please select a category';
                        isValid = false;
                    }


                    //set  default as fasle before Validating Sizes and Quantities 
                    // isValid = false;

                    // // Validate Sizes and Quantities (for sizes 6, 7, 8, 9)
                    // const sizeInputs = ['size-six', 'size-seven', 'size-eight', 'size-nine'];
                    // sizeInputs.forEach((sizeId, index) => {
                    //     const quantityInput = document.getElementById(sizeId);
                    //     const quantityError = document.getElementById(`quantity-error-${sizeId}`);

                    //     if (quantityInput.value > 0) {
                    //         isValid = true; // At least one valid input

                    //     } else {
                    //         quantityError.innerText = "at least one valid quantity should be given";
                    //     }
                    // });
                    // // Final validation check
                    // if (!isValid) {
                    //     console.log('Validation failed: No valid quantities entered.');
                    // } else {
                    //     console.log('Validation passed: Quantities are valid.');



                    //     // Clear previous errors
                    //     sizeInputs.forEach((sizeId, index) => {

                    //         const quantityError = document.getElementById(`quantity-error-${sizeId}`);
                    //         quantityError.innerText = ""
                    //     });


                    // }

                    return isValid;
                }


            </script>


</body>

</html>