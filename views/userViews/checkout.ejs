<!DOCTYPE html>
<html lang="en">

<head>
  <title>Shoppers &mdash; Colorlib e-Commerce Template</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mukta:300,400,700">
  <link rel="stylesheet" href="styles/fonts/icomoon/style.css">
  <link rel="stylesheet" href="styles/css/bootstrap.min.css">
  <link rel="stylesheet" href="styles/css/magnific-popup.css">
  <link rel="stylesheet" href="styles/css/jquery-ui.css">
  <link rel="stylesheet" href="styles/css/owl.carousel.min.css">
  <link rel="stylesheet" href="styles/css/owl.theme.default.min.css">
  <link rel="stylesheet" href="styles/css/aos.css">
  <link rel="stylesheet" href="styles/css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
   <!-- tab logo -->
   <link rel="icon" type="image/png" href="/images/logo/tabLogo.png">



  <style>
    .error-input {
      border-color: red;
    }

    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <div class="site-wrap">
    <%- include("../partials/header") %>

      <div class="bg-light py-3">
        <div class="container">
          <div class="row">
            <div class="col-md-12 mb-0">
              <a href="/">Home</a>
              <span class="mx-2 mb-0">/</span>
              <a href="/cart">Cart</a>
              <span class="mx-2 mb-0">/</span>
              <strong class="text-black">Checkout</strong>
            </div>
          </div>
        </div>
      </div>

      <div class="site-section">
        <div class="container">
          <div class="row mb-5">
            <div class="col-md-12">
              <div class="border p-4 rounded" role="alert">
                Returning customer? <a href="#">Click here</a> to login
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-12">
              <h2 class="h3 mb-3 text-black">Billing Details</h2>

              <div class="container mt-5">
                <form id="checkoutForm">
                  <div class="row">
                    <div class="col-md-8">
                      <!-- Saved Addresses Dropdown -->
                      <div class="mb-3">
                        <label class="form-label">Select Saved Address</label>
                        <select class="form-select" id="savedAddressSelect">
                          <option value="">Select a saved address</option>
                        </select>
                      </div>

                      <!-- Address Type Selection -->
                      <div class="mb-3">
                        <label class="form-label mb-2">Address Type</label>
                        <div class="btn-group d-flex justify-content-between" role="group" style="max-width: 400px;">
                          <input type="radio" class="btn-check" name="addressType" id="homeAddress" value="Home"
                            checked>
                          <label class="btn btn-outline-primary  " for="homeAddress">Home</label>

                          <input type="radio" class="btn-check" name="addressType" id="workAddress" value="Work">
                          <label class="btn btn-outline-primary " for="workAddress">Work</label>

                          <input type="radio" class="btn-check" name="addressType" id="otherAddress" value="Other">
                          <label class="btn btn-outline-primary " for="otherAddress">Other</label>
                        </div>
                      </div>

                      <!-- Personal and Address Information -->
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <label for="fullName" class="form-label">Full Name *</label>
                          <input type="text" class="form-control" id="fullName" name="fullName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                          <label class="form-label">State *</label>
                          <select id="state" name="state" class="form-select" aria-describedby="stateError" required>
                            <option selected disabled value="">Select your state</option>
                            <option>Andhra Pradesh</option>
                            <option>Arunachal Pradesh</option>
                            <option>Assam</option>
                            <option>Bihar</option>
                            <option>Chhattisgarh</option>
                            <option>Goa</option>
                            <option>Gujarat</option>
                            <option>Haryana</option>
                            <option>Himachal Pradesh</option>
                            <option>Jharkhand</option>
                            <option>Karnataka</option>
                            <option>Kerala</option>
                            <option>Madhya Pradesh</option>
                            <option>Maharashtra</option>
                            <option>Manipur</option>
                            <option>Meghalaya</option>
                            <option>Mizoram</option>
                            <option>Nagaland</option>
                            <option>Odisha</option>
                            <option>Punjab</option>
                            <option>Rajasthan</option>
                            <option>Sikkim</option>
                            <option>Tamil Nadu</option>
                            <option>Telangana</option>
                            <option>Tripura</option>
                            <option>Uttar Pradesh</option>
                          </select>
                          <div class="error-message" id="stateError" role="alert"></div>
                        </div>
                      </div>

                      <div class="mb-3">
                        <label for="phone" class="form-label">Phone *</label>
                        <input type="tel" class="form-control" id="phone" name="phone" required>
                      </div>

                      <div class="mb-3">
                        <label for="altPhone" class="form-label">Alternative Phone</label>
                        <input type="tel" class="form-control" id="altPhone" name="altPhone">
                      </div>

                      <div class="mb-3">
                        <label for="city" class="form-label">City *</label>
                        <input type="text" class="form-control" id="city" name="city" required>
                      </div>

                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <label for="landmark" class="form-label">Landmark</label>
                          <input type="text" class="form-control" id="landmark" name="landmark">
                        </div>
                        <div class="col-md-6 mb-3">
                          <label for="pincode" class="form-label">Pin Code *</label>
                          <input type="text" pattern="[0-9]{6}" class="form-control" id="pincode" name="pincode"
                            required>
                        </div>
                      </div>

                      <!-- Payment Method -->
                      <div class="mb-3">
                        <label class="form-label">Payment Method *</label>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="COD" value="COD">
                          <label class="form-check-label" for="COD">Cash On Delivery</label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="online" value="Online">
                          <label class="form-check-label" for="online">Online Payment</label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="Wallet">
                          <label class="form-check-label" for="Wallet">Wallet</label>
                        </div>

                      </div>

                      <!-- Order Notes -->
                      <div class="mb-3">
                        <label for="orderNotes" class="form-label">Order Notes</label>
                        <textarea class="form-control" id="orderNotes" name="orderNotes" rows="3"></textarea>
                      </div>
                    </div>
                    <!-- coupon apply -->
                    <!-- Coupon Section -->
                    <div class="col-md-4">
                      <div class="card">
                        <div class="card-header">
                          <h5>Apply Coupon</h5>
                        </div>
                        <div class="card-body">
                          <select id="couponSelect" class="form-select">
                            <option value="" selected disabled>Select a coupon</option>
                            <% coupons.forEach((coupon)=> { %>
                              <option value="<%= coupon._id %>" data-discount="<%= coupon.discount %>">
                                <%= coupon.code %> - <%= coupon.discontType %> - <%= coupon.discountValue %> Off
                              </option>
                              <% }); %>
                          </select>
                          <button id="applyCouponBtn" class="btn btn-primary mt-3">Apply Coupon</button>
                          <button id="removeCouponBtn" class="btn btn-primary mt-3" style="display: none;">Remove
                            Coupon</button>
                        </div>
                      </div>

                      <input type="hidden" id="selectedCoupon" name="selectedCoupon">

                      <!--  -->
                      <!-- Order Summary -->

                      <div class="card">
                        <div class="card-header">
                          Order Summary
                        </div>
                        <div class="card-body">
                          <h5 class="card-title">Your Items</h5>


                          <ul class="list-group mb-3" id="orderItems">
                            <%orderItems.forEach((product,index)=>{%>
                              <li class="list-group-item">
                                <!-- Product Name and Main Price -->
                                <div class="d-flex justify-content-between align-items-start">
                                  <span>
                                    <%=product.productName%>
                                  </span>
                                  <strong>
                                    <%if(product.isOfferApplied){%>
                                      ₹<%=cart.items[index].quantity * product.offerPrice%>
                                        <%}else{%>
                                          ₹<%=cart.items[index].quantity * product.salePrice%>
                                            <%}%>
                                              (<%=cart.items[index].quantity%>
                                                <%= cart.items[index].quantity> 1 ? 'items' : 'item' %>)
                                  </strong>
                                </div>

                                <!-- GST Details -->
                                <div class="mt-2 text-muted small">
                                  <div class="d-flex justify-content-between">
                                    <span>Base Price:</span>
                                    <span>₹<%=product.gstDetails.basePrice%></span>
                                  </div>
                                  <div class="d-flex justify-content-between">
                                    <span>GST (<%=product.gstDetails.percentage%>%):</span>
                                    <span>₹<%=product.gstDetails.gstAmount%></span>
                                  </div>
                                </div>
                              </li>
                              <%})%>
                          </ul>


                          <ul>
                            <li class="list-group-item  d-flex justify-content-between">
                              <span>Shipping</span>
                              <strong id="shipping-charge">₹ 10.00</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                              <strong>Discount</strong>

                              <strong id="discount-amount" class="text-success">-₹0.00</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                              <strong>Sub Total</strong>
                              <strong id="total-basePrice"> ₹ <%= totalBasePrice%> </strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                              <strong>GST</strong>
                              <strong id="total-gstAmount"> ₹ <%= totalGstAmount%> </strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                              <strong>Grand Total</strong>
                              <strong id="final-amount"> ₹ <%=cart.finalAmount + 10%> </strong>
                            </li>
                          </ul>

                          <button type="submit" class="btn btn-primary w-100">Place Order</button>
                        </div>
                      </div>
                      <!--  -->


                    </div>
                    <!-- apply coupon end  -->


                  </div>
                </form>
              </div>
            </div>
          </div>

          <%- include("../partials/footer") %>
        </div>
      </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {

      const form = document.getElementById('checkoutForm');
      const savedAddressSelect = document.getElementById('savedAddressSelect');

      //apply coupon btn

      const applyCouponBtn = document.getElementById("applyCouponBtn")
      const removeCouponBtn = document.getElementById("removeCouponBtn")

      removeCouponBtn.addEventListener("click", (event) => {

        window.location.reload();
      })

      // Safely parse saved addresses
      let savedAddresses = [];
      try {
        savedAddresses = JSON.parse('<%- JSON.stringify(addresses || []) %>');
      } catch (error) {
        console.error('Error parsing saved addresses:', error);
      }

      // Populate saved addresses dropdown
      savedAddresses.forEach(address => {
        const option = document.createElement('option');
        option.value = address._id;
        option.textContent = `${address.fullName} - ${address.addressType}-${address.city}`;
        savedAddressSelect.appendChild(option);
      });

      // Event listener for saved address selection
      savedAddressSelect.addEventListener('change', function () {
        const selectedAddressId = this.value;
        if (selectedAddressId) {


          const address = savedAddresses.find(a => a._id === selectedAddressId);

          if (address) {
            // Populate form fields
            document.getElementById('fullName').value = address.fullName;
            document.querySelector(`input[name="addressType"][value="${address.addressType}"]`).checked = true;
            document.getElementById('state').value = address.state;
            document.getElementById('city').value = address.city;
            document.getElementById('altPhone').value = address.altPhone || '';
            document.getElementById('pincode').value = address.pincode;
            document.getElementById('phone').value = address.phone;
            document.getElementById('landmark').value = address.landMark || '';
          }
        }
      });
      // Get references to the coupon dropdown and hidden input field
      const couponSelect = document.getElementById("couponSelect");
      const selectedCouponInput = document.getElementById("selectedCoupon");

      // Listen for changes in the coupon dropdown
      couponSelect.addEventListener("change", () => {
        const selectedCoupon = couponSelect.value; // Get the selected coupon ID
        selectedCouponInput.value = selectedCoupon; // Update the hidden input field
      });


      //coupon valid checking fetching
      document.getElementById("applyCouponBtn").addEventListener("click", async (event) => {
        event.stopPropagation();
        try {
          const couponId = document.getElementById("selectedCoupon").value;

          if (!couponId) {
            Swal.fire({
              icon: 'warning',
              title: 'Error',
              text: 'Please enter a coupon code',
            });
            return;
          }

          const response = await fetch("/applyCoupon", {
            method: "POST",
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponId }) // Send as an object
          });

          const data = await response.json(); // Always parse the response

          if (!response.ok) {
            Swal.fire({
              icon: 'warning',
              title: 'Error',
              text: data.message || 'Failed to apply coupon',
            });
          } else {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: "Coupon Applied Successfully",
              showConfirmButton:false
            }).then(() => {
              // Update UI with new values
              const totalAmount = document.getElementById('final-amount');
              const discountElement = document.getElementById('discount-amount');
              removeCouponBtn.style.display = "block";
              applyCouponBtn.style.display = "none";

              if (totalAmount) {
                totalAmount.innerText = `₹ ${data.totalAmount.toFixed(2)}`;
              }

              if (discountElement && data.discountAmount) {
                discountElement.innerText = `₹ ${data.discountAmount.toFixed(2)}`;
              }
            });
          }
        } catch (error) {
          console.error('Error applying coupon:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again.',
          });
        }
      });



      // Form submission handler
      form.addEventListener('submit', async function (event) {
        event.preventDefault();

        try {

          const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value || 'Not Selected'
          // Collect form data
          const formData = {
            addressType: document.querySelector('input[name="addressType"]:checked').value,
            fullName: document.getElementById('fullName').value,
            phone: document.getElementById('phone').value,
            altPhone: document.getElementById('altPhone').value,
            state: document.getElementById('state').value,
            city: document.getElementById('city').value,
            landmark: document.getElementById('landmark').value,
            pincode: document.getElementById('pincode').value,
            paymentMethod: paymentMethod,
            orderNotes: document.getElementById('orderNotes').value || '',

          };

          // Basic form validation
          const requiredFields = ['fullName', 'state', 'city', 'pincode', 'phone'];
          let isValid = true;

          requiredFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (!field.value.trim()) {
              field.classList.add('is-invalid');
              isValid = false;
            } else {
              field.classList.remove('is-invalid');
            }
          });

          // Validate payment method
          if (!document.querySelector('input[name="paymentMethod"]:checked')) {
            isValid = false;
            Swal.fire({
              icon: 'warning',
              title: 'Alert',
              text: 'Please select a payment method',
            });
          }

          if (isValid) {
            // Log or send data (in a real app, you'd send to a server)
            console.log('Order Data:', formData);

            // Show confirmation modal with order details
            Swal.fire({
              title: 'Order Confirmation',
              html: `
    <div class="order-summary p-4">
      <div class="grid grid-cols-2 gap-4">
        <!-- Left Column -->
        <div class="left-column">
          <div class="section mb-4">
            <h5 class="text-gray-700 font-semibold mb-2">Delivery Address</h5>
            <p class="text-gray-600">
              ${formData.fullName}<br>
              ${formData.addressType}<br>
              ${formData.landmark ? formData.landmark + '<br>' : ''}
              ${formData.city}, ${formData.state} - ${formData.pincode}<br>
              ${formData.phone}
              ${formData.altPhone ? '<br>' + formData.altPhone : ''}
            </p>
          </div>

          ${formData.orderNotes ? `
            <div class="section mb-4">
              <h5 class="text-gray-700 font-semibold mb-2">Notes</h5>
              <p class="text-gray-600">${formData.orderNotes}</p>
            </div>
          ` : ''}
        </div>

        <!-- Right Column -->
        <div class="right-column">
          <div class="section mb-4">
            <h5 class="text-gray-700 font-semibold mb-2">Order Summary</h5>
            <div class="order-items mb-3">
              ${document.getElementById('orderItems').innerHTML}
            </div>

            <div class="totals pt-3 border-t">
              <div class="flex justify-between mb-2">
                <span>Payment Method:</span>
                <span>${formData.paymentMethod}</span>
              </div>
              <div class="flex justify-between mb-2">
                <span>Discount:</span>
                <span>${document.getElementById("discount-amount").innerText}  </span>
              </div>
              <div class="flex justify-between mb-2">
                <span>Shipping:</span>
                <span>${document.getElementById("shipping-charge").innerText}</span>
              </div>
              <div class="flex justify-between font-semibold">
                <span>Total GST:</span>
                <span>${document.getElementById("total-gstAmount").innerText}</span>
              </div>
              <div class="flex justify-between font-semibold">
                <span>Total Base Price:</span>
                <span>${document.getElementById("total-basePrice").innerText}</span>
              </div>
              <div class="flex justify-between font-semibold">
                <span>Total:</span>
                <span>${document.getElementById("final-amount").innerText}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
              width: '800px',
              showCancelButton: true,
              confirmButtonText: 'Place Order',
              cancelButtonText: 'Edit',
              confirmButtonColor: '#4CAF50',
              cancelButtonColor: '#f44336',
              reverseButtons: true
            }).then(async (result) => {
              if (result.isConfirmed) {

                if (paymentMethod == "Online") {                                            // if online payment

                  const placeOrderResponse = await fetch("/placeOrder", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify(formData),
                  });

                  const orderData = await placeOrderResponse.json();

                  if (orderData.success) {
                    console.log("Order placed successfully. Proceeding to payment...");

                    // Proceed to Razorpay payment
                    const amount = orderData.amount

                    const response = await fetch("/rzpCreateOrder", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        amount: amount,
                        currency: "INR",
                        orderId: orderData.orderId,
                      }),
                    });

                    const data = await response.json();

                    if (data.success) {
                      const options = {
                        key: data.rzp_key,
                        amount: data.amount,
                        currency: data.currency,
                        name: "StepUp Ecommerce",
                        description: "Purchase",
                        order_id: data.orderId,

                        handler: async function (response) {
                          // Send payment details to backend for verification and order update
                          const verifyResponse = await fetch("/rzpVerifyPayment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_signature: response.razorpay_signature,
                              orderId: orderData.orderId, // Pass backend order ID
                              _id: orderData._id //sending order id to update the payment status

                            }),
                          });

                          const verifyData = await verifyResponse.json();

                          if (verifyData.success) {
                            Swal.fire({
                              icon: "success",
                              title: "Payment Successful",
                              text: "Your payment has been processed successfully!",
                              showConfirmButton: false,
                              timer: 2000,
                            }).then(() => {
                              window.location.href = `/loadSuccessPage/${orderData._id}`;
                            });
                          } else {
                            Swal.fire({
                              icon: "error",
                              title: "Payment Failed",
                              text: "Your payment was unsuccessful. Please try again. ",
                            }).then(() => {
                              window.location.href = `/loadSuccessPage/${orderData._id}`; // Redirect to orders page
                            });
                          }
                        },


                        // Add modal dismiss handler
                        modal: {
                          ondismiss: async function () {
                            try {




                              Swal.fire({
                                icon: "info",
                                title: "Payment Cancelled",
                                text: "Your payment has been cancelled. The order will not be processed.",
                                showConfirmButton: true
                              }).then(() => {
                                window.location.href = `/showDetails/${orderData._id}`;
                              });

                            } catch (error) {
                              console.error("Error cancelling order:", error);
                              Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "There was an error cancelling your order. Please contact support if needed.",
                              });
                            }
                          }
                        },


                        // 

                        prefill: {
                          name: document.getElementById("fullName").value,
                          email: "customer@example.com", // Add email field to form if needed
                          contact: document.getElementById("phone").value,
                        },
                        theme: { color: "#3399cc" },
                      };

                      const rzp = new Razorpay(options);
                      rzp.open();
                    } else {
                      Swal.fire({
                        icon: "error",
                        title: "Razorpay Order Creation Failed",
                        text: "Unable to create Razorpay order. Please try again.",
                      });
                    }
                  } else {

                    Swal.fire({
                      icon: "error",
                      title: "Order Placement Failed",
                      text: orderData.message || "Please try again.",
                    });
                  }



                } else if (paymentMethod === 'Wallet') {                            // order placement by walllet



                  const response = await fetch("/placeOrderByWallet", {

                    method: 'POST',
                    headers: {

                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                  })
                  const data = await response.json();

                  if (data.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success',
                      text: `${data.message}`,
                      showConfirmButton: false,
                      timer: 2000,
                    }).then(() => {
                      // Redirect to orders page
                      window.location.href = `/loadSuccessPage/${data._id}`; // Redirect to orders page
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message,
                    });
                  }






                } else {
                  // // Process the order
                  const response = await fetch("/placeOrder", {
                    method: "POST",
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData),
                  });

                  const data = await response.json();
                  console.log(data);

                  if (data.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success',
                      text: `${data.message}`,
                      showConfirmButton: false,
                      timer: 2000,
                    }).then(() => {
                      // Redirect to orders page
                      window.location.href = `/loadSuccessPage/${data._id}`; // Redirect to orders page
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message,
                    });
                  }
                }
              }
            }
            )
          }
        } catch (error) {

          console.log('unexpected error occured while form submission');
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message,
          });
        }
      });
    });
  </script>

  <script src="scripts/jquery-3.3.1.min.js"></script>
  <script src="scripts/jquery-ui.js"></script>
  <script src="scripts/popper.min.js"></script>
  <script src="scripts/bootstrap.min.js"></script>
  <script src="scripts/owl.carousel.min.js"></script>
  <script src="scripts/jquery.magnific-popup.min.js"></script>
  <script src="scripts/aos.js"></script>
  <script src="scripts/main.js"></script>
</body>

</html>