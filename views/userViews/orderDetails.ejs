<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - <%= order.orderId %>
    </title>
     <!-- tab logo -->
  <link rel="icon" type="image/png" href="/images/logo/tabLogo.png">
    <!-- Bootstrap CSS -->
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>



    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mukta:300,400,700">
    <link rel="stylesheet" href="/styles/fonts/icomoon/style.css">
    <link rel="stylesheet" href="/styles/css/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/css/magnific-popup.css">
    <link rel="stylesheet" href="/styles/css/jquery-ui.css">
    <link rel="stylesheet" href="/styles/css/owl.carousel.min.css">
    <link rel="stylesheet" href="/styles/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="/styles/css/aos.css">
    <link rel="stylesheet" href="/styles/css/style.css">
    <style>
        
       
       
        #downloadSpinner {
            display: none;
        }
        body {
            background-color: #f4f6f9;
        }

        .item-status {
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.9em;
            font-weight: 500;
        }

        .item-status-active {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .item-status-cancelled {
            background-color: #ffebee;
            color: #c62828;
        }

        .product-item {
            position: relative;
            margin-bottom: 1rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .order-details-container {
            max-width: 1000px;
            margin: 50px auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .order-header {
            background-color: #4a90e2;
            color: white;
            padding: 20px;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }

        .order-section {
            padding: 20px;
            border-bottom: 1px solid #f2f2f2;

        }

        .order-status {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .order-status-pending {
            background-color: #ffc107;
            color: white;
        }

        .order-status-processing {
            background-color: #28a745;
            color: white;
        }

        .order-status-shipped {
            background-color: #17a2b8;
            color: white;
        }

        .order-status-delivered {
            background-color: #28a745;
            color: white;
        }

        .order-status-cancelled {
            background-color: #dc3545;
            color: white;
        }

        .product-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #e9ecef;
            border-radius: 5px;
        }

        .product-image {
            max-width: 100px;
            max-height: 100px;
            margin-right: 20px;
        }
    </style>
</head>

<body>
    <%- include("../partials/header")%>
        <div class="container">
            <div class="order-details-container">

                <!-- Order Header -->
                <div class="order-header d-flex justify-content-between align-items-center">

                    <h2 class="mb-0">Order Details</h2>

                    <span class="order-status order-status-<%= order.status.toLowerCase() %>">
                        <%= order.status %>
                    </span>

                </div>

                <!-- Order Information -->
                <div class="order-section">

                    <div class="row">
                        <div class="col-md-6">
                            <h4>Order Information</h4>
                            <p><strong>Order ID:</strong>
                                <span class="fw-bold ms-2"><%= order.orderId %></span>
                            </p>
                            <p><strong>Order Date:</strong>
                                <span class="fw-bold ms-2"><%= new Date(order.invoiceDate).toLocaleDateString('en-US', { year: 'numeric' ,
                                    month: 'long' , day: 'numeric' }) %></span>
                            </p>
                            <p><strong>Payment Type:</strong>
                               <span class="fw-bold ms-2"> <%= order.paymentType %></span>
                            </p>

                            <p>
                                <strong>Payment Status:</strong>
                                <span class="<% 
                                    if (order.paymentStatus === 'Failed') { %> text-danger <% 
                                    } else if (order.paymentStatus === 'Not Paid') { %> text-warning fw-bold ms-2 <% 
                                    } else if (order.paymentStatus === 'Processing') { %> text-primary fw-bold ms-2<% 
                                    } else if (order.paymentStatus === 'Success') { %> text-success fw-bold ms-2<% 
                                    } else if (order.paymentStatus === 'Refunded') { %> text-success fw-bold ms-2<% 
                                    } %>"
                                    
                                    >
                                    <%= order.paymentStatus %>
                                </span>
                            </p>

                            <div class="mt-3">
    <% if (((order.paymentStatus === 'Failed' || order.paymentStatus === 'Not Paid') && order.paymentType == "Online") && !["Cancelled", "Return Request", "Returned", "Shipped", "Delivered", "Return Request Approved", "Return Request Rejected"].includes(order.status)) { %>
        <button class="btn btn-primary mb-2" onclick=" initiatePayment('<%= order._id %>')">
            Pay Now
        </button>
    <% } %>
</div>
                        </div>
                      

                        <div class="col-md-6">
                           <% if(!["Returned","Cancelled","Return Request Approved"].includes(order.status)){%>
                            <h4>Order Summary</h4>
                            <p><strong>Total Items:</strong>
                                <%= order.totalItems %>
                            </p>
                            <p><strong>Total Price:</strong> ₹ <%= order.totalPrice.toFixed(2) %>
                            </p>
                            <p><strong>Shipping Fee:</strong> ₹ <%= order.shippingFee.toFixed(2) %>
                            </p>
                            <% if (order.couponApplied) { %>
                                <p><strong>Coupon:</strong> Applied</p>

                                <% } %>
                                <% if (order.paymentType !== 'COD' && order.paymentStatus === 'Success' && order.paymentStatus !== 'Refunded' && !["Cancelled","Returned"].includes(order.status)) { %>


                            <%}%>
                    <button onclick="downloadInvoice('<%= order._id %>','<%= order.orderId%>')" class="btn btn-primary">
                        <span id="downloadSpinner" class="spinner-border spinner-border-sm me-2"></span>
                        <i class="fas fa-download me-2"></i>Download Invoice
                    </button>
                <% } %>
                
                        </div>
                    </div>
                </div>

                <!-- Product Items -->
                <!-- Product Items -->
                <div class="order-section">
                    <h4>Order Items</h4>
                    <% order.items.forEach((item, index)=> { %>
                        <div class="product-item">
                            <img src="<%=products[index].productImage[0]%>" alt="Product Image" class="product-image">
                            <div class="product-details flex-grow-1">
                                <h5>
                                    <%= item.productName %>
                                </h5>
                                <p>
                                    <strong>Quantity:</strong>
                                    <%= item.quantity %>
                                        | <strong>Price:</strong> ₹ <%= item.price.toFixed(2) %>
                                            | <strong>Subtotal:</strong> ₹ <%= (item.quantity * item.price).toFixed(2)
                                                %>
                                                | <strong>Status:</strong> <span class="item-status <%= item.status === 'Active' ? 'text-success' : '' %> <%= item.status === 'Cancelled' ? 'text-danger' : '' %>">
                                                    <%= item.status || 'Active' %>
                                                </span>
                                </p>
                                <% if ((order.status==='Pending' || order.status==='Processing' ) && (!item.status ||
                                    item.status==='Active' )) { %>
                                    <button class="btn btn-sm btn-outline-danger"
                                        onclick="cancelOrderItem('<%= order._id %>', '<%= item._id %>')"
                                        <%=item.status==='Cancelled' ? 'disabled' : '' %>>
                                        Cancel Item
                                    </button>
                                    <% } %>


                                        <% if (order.status==='Delivered' && item.status==='Active' ) { %>
                                            <button class="btn btn-warning btn-sm"
                                                onclick="openItemReturnModal('<%= order._id %>', '<%= item._id %>')">
                                                Return This Item
                                            </button>
                                            <% } else if (item.returnRequest?.status==='Pending' ) { %>
                                                <span class="badge bg-info">Return Request Pending</span>
                                                <% } else if (item.returnRequest?.status==='Approved' ) { %>
                                                    <span class="badge bg-success">Return Approved</span>
                                                    <% } else if (item.returnRequest?.status==='Rejected' ) { %>
                                                        <span class="badge bg-danger">Return Rejected</span>
                                                        <small class="text-muted d-block">
                                                            Reason: <%= item.returnRequest.adminResponse?.note %>
                                                        </small>
                                                        <% } %>
                            </div>
                        </div>
                        <% }); %>
                </div>
                <!-- Shipping Address -->
                <div class="order-section">
                    <h4>Shipping Address</h4>
                    <p>
                        <strong>
                            <%= order.address.fullName %>
                        </strong><br>
                        <%= order.address.addressType %> Address<br>
                            <%= order.address.city %>, <%= order.address.state %>
                                    <%= order.address.pincode %><br>
                                        <strong>Phone:</strong>
                                        <%= order.address.phone %>
                                            <% if (order.address.altPhone) { %>
                                                | <strong>Alt. Phone:</strong>
                                                <%= order.address.altPhone %>
                                                    <% } %>
                    </p>
                    <% if (order.orderNote) { %>
                        <div class="mt-3">
                            <strong>Order Note:</strong>
                            <p>
                                <%= order.orderNote %>
                            </p>
                        </div>
                        <% } %>


                </div>



                <!-- Action Buttons -->

                <!-- order canclellation button -->
                <div class="order-section text-end">
                    <% if (order.status !=='Delivered' && order.status !=='Cancelled' && ![ "Shipped" , "Delivered"
                        , "Cancelled" , "Return Request" ,"Return Request Approved","Return Request Rejected", "Returned" ].includes(order.status) ) { %>
                        <button class="btn btn-outline-danger me-2" onclick="cancelOrder( '<%= order._id %>')">
                            Cancel Order
                        </button>
                        <% } %>
                            <!-- **** -->

                            <!-- Return Action Buttons -->
                            <div>

                                <% if (order.status==='Delivered' && !['Pending', 'Approved' , 'Rejected'
                                    ].includes(order.returnRequest?.status)) { %>
                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-warning"
                                            onclick="openFullOrderReturnModal('<%= order._id %>')">
                                            Return Full Order
                                        </button>
                                    </div>
                                    <% } %>

                            </div>
                            <!-- ***** -->


                </div>
            </div>
        </div>


        <!-- Full Order Return Modal -->
        <div class="modal fade" id="fullOrderReturnModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Return Full Order</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="fullOrderReturnForm">
                            <div class="mb-3">
                                <label class="form-label">Reason for Return</label>
                                <select class="form-select" name="reason" required>
                                    <option value="">Select a reason</option>
                                    <option value="Unsatisfied with Products">Unsatisfied with Products</option>
                                    <option value="Received Wrong Order">Received Wrong Order</option>
                                    <option value="Quality Issues">Quality Issues</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Additional Details</label>
                                <textarea class="form-control" name="details" rows="3" required></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitFullOrderReturn()">Submit Return
                            Request</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- single Item Return Request Modal -->
        <div class="modal fade" id="itemReturnModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Item Return</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="itemReturnForm">
                            <input type="hidden" id="returnItemId" name="itemId">
                            <div class="mb-3">
                                <label class="form-label">Reason for Return</label>
                                <select class="form-select" name="reason" required>
                                    <option value="">Select a reason</option>
                                    <option value="Wrong Size">Wrong Size</option>
                                    <option value="Damaged Product">Damaged Product</option>
                                    <option value="Not as Described">Not as Described</option>
                                    <option value="Quality Issues">Quality Issues</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Additional Details</label>
                                <textarea class="form-control" name="details" rows="3" required></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitItemReturn()">Submit
                            Request</button>
                    </div>
                </div>
            </div>
        </div>

        <%- include("../partials/footer")%>
            


</body>


<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
            <script src="/scripts/jquery-3.3.1.min.js"></script>
            <script src="/scripts/jquery-ui.js"></script>
            <script src="/scripts/popper.min.js"></script>
            <script src="/scripts/bootstrap.min.js"></script>
            <script src="/scripts/owl.carousel.min.js"></script>
            <script src="/scripts/jquery.magnific-popup.min.js"></script>
            <script src="/scripts/aos.js"></script>
            <script src="/scripts/main.js"></script>
            <script>

                function cancelOrderItem(orderId, itemId) {
                    Swal.fire({
                        title: 'Confirm',
                        text: 'Do you want to cancel this item?',
                        icon: 'warning',
                        showCancelButton: true, // Adds a cancel button
                        confirmButtonText: 'Yes, Cancel',
                        cancelButtonText: 'No, Keep It'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Make a POST request to cancel the item
                            fetch(`/cancelSingleItem?orderId=${orderId}&itemId=${itemId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Success!',
                                            text: 'Your item was cancelled successfully.',
                                            icon: 'success',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            window.location.reload(); // Refresh the page
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Failed!',
                                            text: `Failed to cancel item: ${data.message}`,
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'An error occurred while cancelling the item.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        }
                    });
                }

                let currentOrderId=null;
                let currentItemId=null;
           

                //full item return
                function openItemReturnModal(orderId, itemId) {
                    currentOrderId = orderId;
                    currentItemId = itemId;
                    new bootstrap.Modal(document.getElementById('itemReturnModal')).show();
                }

                 // returnorder request logic
                 function openFullOrderReturnModal(orderId) {
                    currentOrderId = orderId;
                    new bootstrap.Modal(document.getElementById('fullOrderReturnModal')).show();
                }

                //closing modal function
                function closeItemReturnModal() {
                    const modal = new bootstrap.Modal(document.getElementById('itemReturnModal'));
                    if (modal) {
                        modal.hide();
                    }
                }



                //submit full order return
                function submitFullOrderReturn() {
                    const form = document.getElementById('fullOrderReturnForm');
                    const formData = new FormData(form);

                    fetch(`/returnOrder?orderId=${currentOrderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            reason: formData.get('reason'),
                            details: formData.get('details')
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: data.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.reload(); // Refresh the page
                                });



                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });

                            }
                        });
                }



                //single item return
                function submitItemReturn() {
                    const form = document.getElementById('itemReturnForm');
                    const formData = new FormData(form);

                    fetch(`/returnItem?orderId=${currentOrderId}&itemId=${currentItemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            reason: formData.get('reason'),
                            details: formData.get('details')
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: data.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.reload(); // Refresh the page
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        });
                }





                // order cancellation function
                const cancelOrder = async (_id) => {
                    try {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Do you want to cancel the order?',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, cancel it',
                            cancelButtonText: 'No, keep it',
                            reverseButtons: true
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                // cancellation logic
                                const response = await fetch(`/cancelOrder/${_id}`);
                                const data = await response.json();

                                if (data.success) {
                                    console.log("Order cancellation successful");
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Your order has been cancelled.',
                                    });
                                    setTimeout(() => location.reload(), 1500);
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Cancellation failed',
                                        text: data.message,
                                    });
                                }
                            } else if (result.dismiss === Swal.DismissReason.cancel) {
                                Swal.fire(
                                    'Cancelled',
                                    'Your order is safe :)',
                                    'info'
                                );
                            }
                        });

                    } catch (error) {
                        console.log("Internal server error");

                        Swal.fire({
                            icon: 'error',
                            title: 'Unexpected error occurred',
                            text: "",
                        });
                    }
                }




                    // payment button function

                    async function initiatePayment(orderId) {
                        try {



                            const response = await fetch("/reTryRzpCreateOrder", {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    _id: orderId,
                                    currency: "INR",
                                })
                            });

                            const data = await response.json();
                            
                                                            

                            if (data.success) {
                                const fullName = document.getElementById("fullName")?.value || "Customer";
                                const phone = document.getElementById("phone")?.value || "0000000000";


                                console.log("order created",data)
                                const options = {
                                    key: data.rzp_key,
                                    amount: data.amount,
                                    currency: data.currency,
                                    name: "StepUp Ecommerce",
                                    description: "Purchase",
                                    order_id: data.orderId, //rzp orderid
                                    handler: async function (response) {
                                        // Send payment details to backend for verification and order update
                                        const verifyResponse = await fetch("/reTryRzpVerifyPayment", {
                                            method: "POST",
                                            headers: { "Content-Type": "application/json" },
                                            body: JSON.stringify({
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature,                                              
                                                _id: orderId // sending order object id to update the payment status
                                            }),
                                        });

                                        const verifyData = await verifyResponse.json();

                                        if (verifyData.success) {
                                            Swal.fire({
                                                icon: "success",
                                                title: "Payment Successful",
                                                text: "Your payment has been processed successfully!",
                                                showConfirmButton: false,
                                                timer: 2000,
                                            }).then(() => {
                                                window.location.reload(); 
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: "error",
                                                title: "Payment Failed",
                                                text: "Your payment was unsuccessful. Please try again. ",
                                            }).then(() => {
                                                window.location.reload(); 
                                            });
                                        }
                                    },
                                    prefill: {
                                        name: fullName,
                                        email: "customer@gmail.com", // Add email field to form if needed
                                        contact: phone
                                    },
                                    theme: { color: "#3399cc" },
                                };

                                const rzp = new Razorpay(options);
                                rzp.open();
                            }
                        } catch (error) {
                            console.error("Error initiating payment:", error);
                        }
                    }

                    //download invoice
                    async function downloadInvoice(_id,orderId) {
            const spinner = document.getElementById('downloadSpinner');
            spinner.style.display = 'inline-block';
            
            try {
                const response = await fetch(`/downloadInvoice/${_id}`);
                if (!response.ok) throw new Error('Download failed');
                
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `invoice-${orderId}.pdf`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();

                Swal.fire({
                    title: 'Success!',
                    text: 'Invoice downloaded successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to download invoice. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            } finally {
                spinner.style.display = 'none';
            }
        }

       

                

            </script>

</html>