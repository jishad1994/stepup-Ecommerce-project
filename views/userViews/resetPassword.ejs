<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles/css/signup.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
     <!-- tab logo -->
  <link rel="icon" type="image/png" href="/images/logo/tabLogo.png">
    <style>
        /* General Styles */
body {
    font-family: 'Poppins', sans-serif;
    background-color: #f5f5f5;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}

.signup-container {
    display: flex;
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.signup-form {
    flex: 1;
    padding: 40px;
    max-width: 500px;
}

.signup-image {
    flex: 1;
    background-image: url('./images/forgotHero.jpeg'); /* Replace with your image path */
    background-size: cover; /* Ensures the image covers the entire container */
    background-position: center; /* Centers the image */
    color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 40px;
    position: relative;
}



.signup-image h2 {
    font-size: 2rem;
    margin-bottom: 10px;
    position: relative;
    z-index: 2; /* Ensures text is above the overlay */
}

.signup-image p {
    font-size: 1rem;
    opacity: 0.8;
    position: relative;
    z-index: 2; /* Ensures text is above the overlay */
}

h2 {
    font-size: 1.8rem;
    margin-bottom: 20px;
    color: #333;
    font-weight: 600;
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    font-size: 0.9rem;
    color: #555;
    margin-bottom: 5px;
}

input {
    width: 100%;
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 10px;
    font-size: 1rem;
    outline: none;
    transition: border-color 0.3s ease;
}

input:focus {
    border-color: #2575fc;
    box-shadow: 0 0 5px rgba(37, 117, 252, 0.5);
}

.password-input-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #777;
}

.btn {
    width: 100%;
    padding: 12px;
    background: #2575fc;
    color: #fff;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
}

.btn:hover {
    background: #1a5bbf;
}

.login-link {
    text-align: center;
    margin-top: 20px;
    font-size: 0.9rem;
    color: #555;
}

.login-link a {
    color: #2575fc;
    text-decoration: none;
}

.login-link a:hover {
    text-decoration: underline;
}

.error-message {
    color: #ff4d4d;
    font-size: 0.8rem;
    margin-top: 5px;
    display: none;
}
    </style>
</head>

<body>
    <div class="container">
        <div class="signup-container">
            <div class="signup-form">

                <h2>Resest Password</h2>
                <form id="signupForm">



                    <div class="form-group">
                        <label for="password">New Password</label>
                        <div class="password-input-container">
                            <input type="password" id="password" name="password" required>
                            <i class="fas fa-eye password-toggle" id="passwordToggle"></i>
                        </div>
                        <div class="error-message" id="passwordError"></div>
                    </div>
                    <div class="form-group">
                        <label for="confirm-password">Confirm Password</label>
                        <div class="password-input-container">
                            <input type="password" id="confirmPassword" name="confirmPassword" required>
                            <i class="fas fa-eye password-toggle" id="passwordToggle2"></i>
                        </div>
                        <div class="error-message" id="confirmPasswordError"></div>
                    </div>
                    <button type="submit" class="btn">Reset Password</button>

                    <div class="login-link">
                        Already have an account? <a href="/login">Log in</a>
                    </div>
                </form>
            </div>
            <div class="signup-image">
                <h2>Welcome to stepUp!</h2>
            </div>
        </div>
    </div>
</body>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("signupForm");

        // Utility function for toggling password visibility
        function togglePasswordVisibility(inputId, toggleIconId) {
            const input = document.getElementById(inputId);
            const toggleIcon = document.getElementById(toggleIconId);

            toggleIcon.addEventListener("click", () => {
                const type = input.getAttribute("type") === "password" ? "text" : "password";
                input.setAttribute("type", type);
                toggleIcon.classList.toggle("fa-eye");
                toggleIcon.classList.toggle("fa-eye-slash");
            });
        }

        // Attach password visibility toggles
        togglePasswordVisibility("password", "passwordToggle");
        togglePasswordVisibility("confirmPassword", "passwordToggle2");

        // Form validation functions
        const validators = {
            password: (value) =>
                value.length >= 8 &&
                /[A-Z]/.test(value) &&
                /[a-z]/.test(value) &&
                /\d/.test(value) &&
                /[!@#$%^&*]/.test(value) ||
                "Password must be at least 8 characters and include uppercase, lowercase, numbers, and special characters.",
            confirmPassword: (value, formData) =>
                value === formData.password || "Passwords do not match.",
        };

        // Validate a single field
        function validateField(field, value, formData) {
            const errorElement = document.getElementById(`${field}Error`);
            const validator = validators[field];
            const isValid = validator(value, formData);

            if (isValid === true) {
                errorElement.style.display = "none";
                return true;
            } else {
                errorElement.textContent = isValid;
                errorElement.style.display = "block";
                return false;
            }
        }

        // Form submission
        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = {
                password: document.getElementById("password").value,
                confirmPassword: document.getElementById("confirmPassword").value,
            };

            let isValid = true;
            for (const field in formData) {
                if (!validateField(field, formData[field], formData)) {
                    isValid = false;
                }
            }

            if (isValid) {
                try {
                    const response = await fetch("/resetPasswordFinal", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(formData),
                    });

                    const data = await response.json();
                    if (data.success) {

                        form.reset();
                        Swal.fire({
                            icon: 'success',
                            title: "success",
                            text: `${data.message}`,
                        }).then(() => {
                            window.location.href = "/login";


                        })


                    } else if (!data.success) {


                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: `${data.message}`,
                        });
                    }
                } catch (error) {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Something went wrong. Please try again later.",
                    });
                }
            }
        });
    });
</script>

</html>