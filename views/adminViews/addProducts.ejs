<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Nest Dashboard - Add New Product</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" type="image/x-icon" href="/images/admin/imgs/theme/favicon.svg">
    <link href="/styles/admin/css/main.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Cropper.js CSS and JS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <style>
        #image-crop-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .crop-modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
        }

        #image-to-crop {
            max-width: 100%;
            max-height: 500px;
        }

        .image-upload-info {
            color: #6c757d;
            margin-bottom: 10px;
        }
    </style>
</head>

<body>
    <%- include("partials/header")%>

        <section class="content-main">
            <form id="product-form">
                <div class="row">
                    <div class="col-6">
                        <div class="content-header">
                            <h2 class="content-title">Add New Product</h2>
                            <div>
                                <!-- <button class="btn btn-light rounded font-sm mr-5 text-body hover-up" type="button" id="draft-btn">Save to draft</button> -->
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Add Product</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-6">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>1. General info</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label" for="title">Product title <span
                                                    class="text-danger">*</span></label>
                                            <input type="text" id="product-title" name="title" placeholder="Type here"
                                                class="form-control" required>
                                            <small class="text-danger" id="title-error"></small>
                                        </div>
                                        <div class="mb-4">
                                            <label class="form-label" for="description">Description <span
                                                    class="text-danger">*</span></label>
                                            <textarea id="product-description" name="description"
                                                placeholder="Type here" class="form-control" rows="4"
                                                required></textarea>
                                            <small class="text-danger" id="description-error"></small>
                                        </div>
                                    </div>
                                </div>

                                <hr class="mb-4 mt-0">

                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>2. Pricing</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Regular Price in ₹ <span
                                                    class="text-danger">*</span></label>
                                            <input type="number" id="regular-price" name="regularPrice"
                                                placeholder="₹ 00.0" class="form-control" min="0" step="0.01" required>
                                            <small class="text-danger" id="regularPrice-error"></small>
                                        </div>
                                        <div class="mb-4">
                                            <label class="form-label">Sale Price in ₹ <span
                                                    class="text-danger">*</span></label>
                                            <input type="number" id="sale-price" name="salePrice" placeholder="₹ 00.0"
                                                class="form-control" min="0" step="0.01" required>
                                            <small class="text-danger" id="salePrice-error"></small>
                                        </div>
                                    </div>
                                </div>
                                <!-- offer addiing -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>3. Product Offer</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Product Offer in % </label>
                                            <input type="number" id="productOffer" name="productOffer" placeholder="0 %"
                                                class="form-control" min="0" max="100" step="0.01">
                                            <small class="text-danger" id="productOffer-error"></small>
                                        </div>

                                    </div>
                                </div>

                                <!--  -->


                                <hr class="mb-4 mt-0">

                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>4. Category</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <div class="row">
                                                <% categories.forEach((category, index)=> { %>
                                                    <div class="col-6 col-md-4 mb-2">
                                                        <label class="form-check">
                                                            <input class="form-check-input" type="radio" name="category"
                                                                value="<%= category._id %>" <%=index===0 ? 'required'
                                                                : '' %>>
                                                            <span class="form-check-label">
                                                                <%= category.name %>
                                                            </span>
                                                        </label>
                                                    </div>
                                                    <% }); %>
                                            </div>
                                            <small class="text-danger" id="category-error"></small>
                                        </div>
                                    </div>
                                </div>





                                <hr class="mb-4 mt-0">
                                <!-- Size and Quantity Addition -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>5. Size and Quantity</h6>
                                    </div>

                                    <hr class="mb-4 mt-0">

                                    <!-- Size 6 -->
                                    <div class="mb-4">

                                        <input type="text" name="sizes[]" placeholder="size 6" class="form-control"
                                            value="6" min="0" disabled>
                                        <input type="number" id="size-six" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" required>
                                        <small class="text-danger" id="quantity-error-size-six"></small>
                                    </div>

                                    <!-- Size 7 -->
                                    <div class="mb-4">
                                        <!-- <label class="form-label">Size 7 <span class="text-danger">*</span></label> -->
                                        <input type="text" name="sizes[]" class="form-control" value="7" min="0"
                                            disabled>
                                        <input type="number" id="size-seven" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" required>
                                        <small class="text-danger" id="quantity-error-size-seven"></small>
                                    </div>

                                    <!-- Size 8 -->
                                    <div class="mb-4">
                                        <input type="number" name="sizes[]" class="form-control" value="8" min="0"
                                            disabled>
                                        <input type="number" id="size-eight" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" required>
                                        <small class="text-danger" id="quantity-error-size-eight"></small>
                                    </div>

                                    <!-- Size 9 -->
                                    <div class="mb-4">
                                        <input type="number" name="sizes[]" class="form-control" value="9" min="0"
                                            disabled>
                                        <input type="number" id="size-nine" name="quantities[]" placeholder="quantity"
                                            class="form-control" min="0" step="1" required>
                                        <small class="text-danger" id="quantity-error-size-nine"></small>
                                    </div>
                                </div>
                                <!-- end -->
                                <!-- is featured or not -->
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>6. is Featured ?</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <div class="row">

                                                <div class="col-6 col-md-4 mb-2">
                                                    <label class="form-check">
                                                        <input class="form-check-input" type="radio" name="isFeatured"
                                                            value="true">

                                                        <span class="form-check-label">
                                                            true
                                                        </span>
                                                    </label>
                                                    <label class="form-check">
                                                        <input class="form-check-input" type="radio" name="isFeatured"
                                                            value="false" checked>

                                                        <span class="form-check-label">
                                                            false
                                                        </span>
                                                    </label>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr class="mb-4 mt-0">
                                <div class="row">
                                    <div class="col-md-3">
                                        <h6>7. Media</h6>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="mb-4">
                                            <label class="form-label">Images <span class="text-danger">*</span></label>
                                            <div class="image-upload-info">
                                                Please upload at least 3 images. Maximum 5 images allowed.
                                            </div>
                                            <input id="product-images" name="images" class="form-control" type="file"
                                                accept="image/*" multiple required>
                                            <div id="preview-container" class="mt-3 d-flex flex-wrap"></div>
                                            <small class="text-danger" id="images-error"></small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </section>

        <!-- Image Crop Modal -->
        <div id="image-crop-modal">
            <div class="crop-modal-content">
                <h3>Crop Image</h3>
                <img id="image-to-crop">
                <div class="mt-3">
                    <button id="crop-save-btn" class="btn btn-primary">Save Crop</button>
                    <button id="crop-cancel-btn" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>

        <%- include("partials/footer")%>
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    const form = document.getElementById("product-form");
                    const imageInput = document.getElementById("product-images");
                    const previewContainer = document.getElementById("preview-container");
                    const cropModal = document.getElementById("image-crop-modal");
                    const imageToCrop = document.getElementById("image-to-crop");
                    const cropSaveBtn = document.getElementById("crop-save-btn");
                    const cropCancelBtn = document.getElementById("crop-cancel-btn");
                    const imagesError = document.getElementById("images-error");
                    const productOfferError = document.getElementById('productOffer-error');

                    const MAX_IMAGES = 5;
                    const MIN_IMAGES = 3;

                    let cropper;
                    let currentCropFile;
                    let croppedImages = [];

                    // Image preview and crop setup
                    imageInput.addEventListener('change', (event) => {
                        const files = Array.from(event.target.files);

                        // Check maximum image count
                        if (previewContainer.children.length + files.length > MAX_IMAGES) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Too Many Images',
                                text: `You can upload a maximum of ${MAX_IMAGES} images`
                            });
                            imageInput.value = '';
                            return;
                        }

                        // previewContainer.innerHTML = ''; 
                        // croppedImages = []; 

                        files.forEach((file, index) => {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                const previewWrapper = document.createElement('div');
                                previewWrapper.className = 'mr-2 mb-2 position-relative';

                                const previewImg = document.createElement('img');
                                previewImg.src = e.target.result;
                                previewImg.className = 'img-thumbnail';
                                previewImg.style.maxWidth = '150px';
                                previewImg.style.maxHeight = '150px';

                                const cropBtn = document.createElement('button');
                                cropBtn.textContent = 'Crop';
                                cropBtn.type = 'button';
                                cropBtn.className = 'btn btn-sm btn-warning position-absolute top-0 end-0';
                                cropBtn.addEventListener('click', () => {
                                    currentCropFile = file;
                                    imageToCrop.src = e.target.result;
                                    cropModal.style.display = 'block';

                                    if (cropper) {
                                        cropper.destroy();
                                    }
                                    cropper = new Cropper(imageToCrop, {
                                        aspectRatio: 1,
                                        viewMode: 1,
                                    });
                                });

                                const removeBtn = document.createElement('button');
                                removeBtn.textContent = '×';
                                removeBtn.type = 'button';
                                removeBtn.className = 'btn btn-sm btn-danger position-absolute top-0 start-0';
                                removeBtn.addEventListener('click', () => {
                                    previewWrapper.remove();
                                    updateImageInput();
                                });

                                previewWrapper.appendChild(removeBtn);
                                previewWrapper.appendChild(previewImg);
                                previewWrapper.appendChild(cropBtn);
                                previewContainer.appendChild(previewWrapper);
                            };
                            reader.readAsDataURL(file);
                        });
                    });

                    function updateImageInput() {
                        const dataTransfer = new DataTransfer();
                        croppedImages.forEach(file => dataTransfer.items.add(file));
                        imageInput.files = dataTransfer.files;
                    }

                    // Crop save handler
                    cropSaveBtn.addEventListener('click', () => {
                        if (cropper) {
                            cropper.getCroppedCanvas().toBlob((blob) => {
                                const croppedFile = new File([blob], currentCropFile.name, {
                                    type: currentCropFile.type
                                });

                                croppedImages.push(croppedFile);
                                updateImageInput();

                                cropModal.style.display = 'none';
                                cropper.destroy();
                            });
                        }
                    });

                    // Crop cancel handler
                    cropCancelBtn.addEventListener('click', () => {
                        cropModal.style.display = 'none';
                        if (cropper) {
                            cropper.destroy();
                        }
                    });

                    // Close modal if clicked outside
                    window.addEventListener('click', (event) => {
                        if (event.target == cropModal) {
                            cropModal.style.display = 'none';
                            if (cropper) {
                                cropper.destroy();
                            }
                        }
                    });

                    function validateImages() {
                        if (croppedImages.length < MIN_IMAGES) {
                            imagesError.textContent = `Please upload at least ${MIN_IMAGES} images`;
                            return false;
                        }
                        imagesError.textContent = '';
                        return true;
                    }

                    function clearErrors() {
                        const errorElements = document.querySelectorAll('.text-danger');
                        errorElements.forEach(el => {
                            if (el.id.endsWith('-error')) {
                                el.textContent = '';
                            }
                        });
                    }

                    function validateForm() {
                        clearErrors();
                        let isValid = true;

                        // Title validation
                        const title = document.getElementById('product-title');
                        if (!title.value.trim()) {
                            document.getElementById('title-error').textContent = 'Product title is required';
                            isValid = false;
                        }

                        // Description validation
                        const description = document.getElementById('product-description');
                        if (!description.value.trim()) {
                            document.getElementById('description-error').textContent = 'Description is required';
                            isValid = false;
                        }
                        // validate offer percentage
                        if (productOffer.value < 0 || productOffer.value > 100) {
                            productOfferError.textContent = `offer cannot be ${productOffer.value < 0 ? 'less than zero' : 'greater than 100'}`
                            isValid = false
                        }


                        // Cost validation
                        const regularPrice = document.getElementById('regular-price');
                        if (!regularPrice.value || parseFloat(regularPrice.value) < 0) {
                            document.getElementById('regularPrice-error').textContent = 'Valid cost is required';
                            isValid = false;
                        }

                        const salePrice = document.getElementById('sale-price');
                        if (!salePrice.value || parseFloat(salePrice.value) < 0 || parseFloat(salePrice.value) > parseFloat(regularPrice.value)) {
                            document.getElementById('salePrice-error').textContent = 'Valid sale price is required';
                            isValid = false;
                        }


                        const quantityInputs = document.querySelectorAll('input[name="quantities[]"]');
                        isValid = false;

                        // Clear previous errors

                        quantityInputs.forEach(input => {
                            console.log('clear error worked')
                            const errorId = `quantity-error-${input.id}`;
                            document.getElementById(errorId).textContent = '';
                        });




                        // Validate inputs
                        quantityInputs.forEach(input => {
                            if (input.value > 0) {
                                isValid = true; // At least one valid input
                            } else {
                                const errorId = `quantity-error-${input.id}`;
                                document.getElementById(errorId).textContent = 'Enter a valid quantity.';
                            }
                        })

                        // Final validation check
                        if (!isValid) {
                            console.log('Validation failed: No valid quantities entered.');
                        } else {
                            console.log('Validation passed: Quantities are valid.');



                            // Clear previous errors
                            quantityInputs.forEach(input => {
                                console.log('clear error worked')
                                const errorId = `quantity-error-${input.id}`;
                                document.getElementById(errorId).textContent = '';
                            });


                        }


                        // Category validation
                        const categoryChecked = document.querySelector('input[name="category"]:checked');
                        if (!categoryChecked) {
                            document.getElementById('category-error').textContent = 'Please select a category';
                            isValid = false;
                        }

                        // Images validation
                        if (croppedImages.length < MIN_IMAGES) {
                            document.getElementById('images-error').textContent = `Please upload at least ${MIN_IMAGES} images`;
                            isValid = false;
                        }

                        return isValid;
                    }

                    // Form submission handler
                    form.addEventListener('submit', async (event) => {
                        event.preventDefault();

                        if (!validateForm()) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Validation Error',
                                text: 'Please fill all required fields correctly'
                            });
                            return;
                        }
                        //fetching the sizes
                        const sizes = Array.from(
                            document.querySelectorAll('input[name="sizes[]"]'),
                            input => input.value
                        );

                        //fetching the quantities                        
                        const quantities = Array.from(
                            document.querySelectorAll('input[name="quantities[]"]'),
                            input => input.value
                        );

                        //defining stock retrieving fnction
                        const stockMaker = (sizes, quantities) => {
                            let stock = []
                            for (let size of sizes) {
                                let obj = {
                                    size: size,
                                    quantity: quantities[sizes.indexOf(size)]
                                }
                                stock.push(obj);
                            }
                            return stock;
                        }

                        //define the stock array
                        const stock = stockMaker(sizes, quantities)

                        //stringify the stcok array
                        const stockJson = JSON.stringify(stock);





                        try {

                            const formData = new FormData(form);

                            //append the stock arry to formData
                            formData.append('stock', stockJson);


                            // Clear existing images and append cropped images
                            formData.delete('images');
                            croppedImages.forEach((file, index) => {
                                formData.append('images', file, `product_image_${index + 1}.jpg`);
                            });



                            const response = await fetch('/admin/addProduct', {
                                method: 'POST',
                                body: formData
                            });

                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Product added successfully'
                                }).then(() => {
                                    form.reset();
                                    previewContainer.innerHTML = '';
                                    croppedImages = [];
                                });
                            } else {
                                const errorData = await response.json();
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: errorData.message || 'Failed to add product'
                                });
                            }
                        } catch (error) {
                            console.error('Submission error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Submission Error',
                                text: 'An unexpected error occurred'
                            });
                        }
                    });
                });
            </script>
</body>

</html>