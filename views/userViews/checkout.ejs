<!DOCTYPE html>
<html lang="en">

<head>
  <title>Shoppers &mdash; Colorlib e-Commerce Template</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mukta:300,400,700">
  <link rel="stylesheet" href="styles/fonts/icomoon/style.css">
  <link rel="stylesheet" href="styles/css/bootstrap.min.css">
  <link rel="stylesheet" href="styles/css/magnific-popup.css">
  <link rel="stylesheet" href="styles/css/jquery-ui.css">
  <link rel="stylesheet" href="styles/css/owl.carousel.min.css">
  <link rel="stylesheet" href="styles/css/owl.theme.default.min.css">
  <link rel="stylesheet" href="styles/css/aos.css">
  <link rel="stylesheet" href="styles/css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>



  <style>
    .error-input {
      border-color: red;
    }

    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <div class="site-wrap">
    <%- include("../partials/header") %>

      <div class="bg-light py-3">
        <div class="container">
          <div class="row">
            <div class="col-md-12 mb-0">
              <a href="/">Home</a>
              <span class="mx-2 mb-0">/</span>
              <a href="/cart">Cart</a>
              <span class="mx-2 mb-0">/</span>
              <strong class="text-black">Checkout</strong>
            </div>
          </div>
        </div>
      </div>

      <div class="site-section">
        <div class="container">
          <div class="row mb-5">
            <div class="col-md-12">
              <div class="border p-4 rounded" role="alert">
                Returning customer? <a href="#">Click here</a> to login
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-12">
              <h2 class="h3 mb-3 text-black">Billing Details</h2>

              <div class="container mt-5">
                <form id="checkoutForm">
                  <div class="row">
                    <div class="col-md-8">
                      <!-- Saved Addresses Dropdown -->
                      <div class="mb-3">
                        <label class="form-label">Select Saved Address</label>
                        <select class="form-select" id="savedAddressSelect">
                          <option value="">Select a saved address</option>
                        </select>
                      </div>

                      <!-- Address Type Selection -->
                      <div class="mb-3">
                        <label class="form-label">Address Type</label>
                        <div class="btn-group" role="group">
                          <input type="radio" class="btn-check" name="addressType" id="homeAddress" value="Home"
                            checked>
                          <label class="btn btn-outline-primary" for="homeAddress">Home</label>

                          <input type="radio" class="btn-check" name="addressType" id="workAddress" value="Work">
                          <label class="btn btn-outline-primary" for="workAddress">Work</label>

                          <input type="radio" class="btn-check" name="addressType" id="otherAddress" value="Other">
                          <label class="btn btn-outline-primary" for="otherAddress">Other</label>
                        </div>
                      </div>

                      <!-- Personal and Address Information -->
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <label for="fullName" class="form-label">Full Name *</label>
                          <input type="text" class="form-control" id="fullName" name="fullName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                          <label class="form-label">State *</label>
                          <select id="state" name="state" class="form-select" aria-describedby="stateError" required>
                            <option selected disabled value="">Select your state</option>
                            <option>Andhra Pradesh</option>
                            <option>Arunachal Pradesh</option>
                            <option>Assam</option>
                            <option>Bihar</option>
                            <option>Chhattisgarh</option>
                            <option>Goa</option>
                            <option>Gujarat</option>
                            <option>Haryana</option>
                            <option>Himachal Pradesh</option>
                            <option>Jharkhand</option>
                            <option>Karnataka</option>
                            <option>Kerala</option>
                            <option>Madhya Pradesh</option>
                            <option>Maharashtra</option>
                            <option>Manipur</option>
                            <option>Meghalaya</option>
                            <option>Mizoram</option>
                            <option>Nagaland</option>
                            <option>Odisha</option>
                            <option>Punjab</option>
                            <option>Rajasthan</option>
                            <option>Sikkim</option>
                            <option>Tamil Nadu</option>
                            <option>Telangana</option>
                            <option>Tripura</option>
                            <option>Uttar Pradesh</option>
                          </select>
                          <div class="error-message" id="stateError" role="alert"></div>
                        </div>
                      </div>

                      <div class="mb-3">
                        <label for="phone" class="form-label">Phone *</label>
                        <input type="tel" class="form-control" id="phone" name="phone" required>
                      </div>

                      <div class="mb-3">
                        <label for="altPhone" class="form-label">Alternative Phone</label>
                        <input type="tel" class="form-control" id="altPhone" name="altPhone">
                      </div>

                      <div class="mb-3">
                        <label for="city" class="form-label">City *</label>
                        <input type="text" class="form-control" id="city" name="city" required>
                      </div>

                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <label for="landmark" class="form-label">Landmark</label>
                          <input type="text" class="form-control" id="landmark" name="landmark">
                        </div>
                        <div class="col-md-6 mb-3">
                          <label for="pincode" class="form-label">Pin Code *</label>
                          <input type="text" pattern="[0-9]{6}" class="form-control" id="pincode" name="pincode"
                            required>
                        </div>
                      </div>

                      <!-- Payment Method -->
                      <div class="mb-3">
                        <label class="form-label">Payment Method *</label>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="COD" value="COD">
                          <label class="form-check-label" for="COD">Cash On Delivery</label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard"
                            value="Credit Card">
                          <label class="form-check-label" for="creditCard">Credit Card</label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="UPI" value="UPI">
                          <label class="form-check-label" for="UPI">UPI</label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="paymentMethod" id="netBanking"
                            value="Net Banking">
                          <label class="form-check-label" for="netBanking">Net Banking</label>
                        </div>
                      </div>

                      <!-- Order Notes -->
                      <div class="mb-3">
                        <label for="orderNotes" class="form-label">Order Notes</label>
                        <textarea class="form-control" id="orderNotes" name="orderNotes" rows="3"></textarea>
                      </div>
                    </div>

                    <!-- Order Summary -->
                    <div class="col-md-4">
                      <div class="card">
                        <div class="card-header">
                          Order Summary
                        </div>
                        <div class="card-body">
                          <h5 class="card-title">Your Items</h5>

                          <ul class="list-group mb-3" id="orderItems">
                            <%products.forEach((product,index)=>{%>
                              <li class="list-group-item d-flex justify-content-between">
                                <span>
                                  <%=product.productName%>
                                </span>
                                <strong>$<%=cart.items[index].quantity * product.salePrice%>(
                                    <%=cart.items[index].quantity%> items)</strong>
                                <%})%>
                              </li>
                          </ul>

                          <ul>
                            <li class="list-group-item d-flex justify-content-between">
                              <span>Shipping</span>
                              <strong>$10.00</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                              <strong>Total</strong>
                              <strong>$<%=cart.finalAmount+10%> </strong>
                            </li>
                          </ul>

                          <button type="submit" class="btn btn-primary w-100">Place Order</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>

          <%- include("../partials/footer") %>
        </div>
      </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('checkoutForm');
      const savedAddressSelect = document.getElementById('savedAddressSelect');

      // Safely parse saved addresses
      let savedAddresses = [];
      try {
        savedAddresses = JSON.parse('<%- JSON.stringify(addresses || []) %>');
      } catch (error) {
        console.error('Error parsing saved addresses:', error);
      }

      // Populate saved addresses dropdown
      savedAddresses.forEach(address => {
        const option = document.createElement('option');
        option.value = address._id;
        option.textContent = `${address.fullName} - ${address.addressType}-${address.city}`;
        savedAddressSelect.appendChild(option);
      });

      // Event listener for saved address selection
      savedAddressSelect.addEventListener('change', function () {
        const selectedAddressId = this.value;
        console.log(selectedAddressId);
        if (selectedAddressId) {


          const address = savedAddresses.find(a => a._id === selectedAddressId);
          console.log('address is ', address);

          if (address) {
            // Populate form fields
            document.getElementById('fullName').value = address.fullName;
            document.querySelector(`input[name="addressType"][value="${address.addressType}"]`).checked = true;
            document.getElementById('state').value = address.state;
            document.getElementById('city').value = address.city;
            document.getElementById('altPhone').value = address.altPhone || '';
            document.getElementById('pincode').value = address.pincode;
            document.getElementById('phone').value = address.phone;
            document.getElementById('landmark').value = address.landmark || '';
          }
        }
      });

      // Form submission handler
      form.addEventListener('submit', async function (event) {
        event.preventDefault();

        try {

          const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value || 'Not Selected'
          // Collect form data
          const formData = {
            addressType: document.querySelector('input[name="addressType"]:checked').value,
            fullName: document.getElementById('fullName').value,
            phone: document.getElementById('phone').value,
            altPhone: document.getElementById('altPhone').value,
            state: document.getElementById('state').value,
            city: document.getElementById('city').value,
            landmark: document.getElementById('landmark').value,
            pincode: document.getElementById('pincode').value,
            paymentMethod: paymentMethod,
            orderNotes: document.getElementById('orderNotes').value || '',

          };

          // Basic form validation
          const requiredFields = ['fullName', 'state', 'city', 'pincode', 'phone'];
          let isValid = true;

          requiredFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (!field.value.trim()) {
              field.classList.add('is-invalid');
              isValid = false;
            } else {
              field.classList.remove('is-invalid');
            }
          });

          // Validate payment method
          if (!document.querySelector('input[name="paymentMethod"]:checked')) {
            isValid = false;
            Swal.fire({
              icon: 'warning',
              title: 'Alert',
              text: 'Please select a payment method',
            });
          }

          if (isValid) {
            // Log or send data (in a real app, you'd send to a server)
            console.log('Order Data:', formData);

            // Show confirmation modal with order details
            Swal.fire({
              title: 'Confirm Your Order',
              html: `
            <div class="order-confirmation">
              <h4>Delivery Address</h4>
              <p>${formData.fullName}<br>
              ${formData.addressType}<br>
              ${formData.landmark ? formData.landmark + ', ' : ''}${formData.city}<br>
              ${formData.state} - ${formData.pincode}<br>
              Phone: ${formData.phone}
              ${formData.altPhone ? '<br>Alt Phone: ' + formData.altPhone : ''}</p>
              
              <h4>Order Summary</h4>
              <div class="order-items">
                ${document.getElementById('orderItems').innerHTML}
              </div>
              
              <h4>Payment Method</h4>
              <p>${formData.paymentMethod}</p>
              
              ${formData.orderNotes ? `
                <h4>Order Notes</h4>
                <p>${formData.orderNotes}</p>
              ` : ''}
              
              <div class="total-amount">
                <h4>Total Amount: $${document.querySelector('.list-group-item:last-child strong').textContent}</h4>
              </div>
            </div>
          `,
              showCancelButton: true,
              confirmButtonText: 'Confirm Order',
              cancelButtonText: 'Edit Order',
              confirmButtonColor: '#28a745',
              cancelButtonColor: '#dc3545',
              width: '600px'
            }).then(async (result) => {
              if (result.isConfirmed) {

                if (paymentMethod == "Credit Card") {
                  const response = await fetch("/rzpCreateOrder", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ amount: `<%=cart.finalAmount + 10%>`, currency: "INR" }),
                  });
                  const data = await response.json();

                  if (data.success) {

                    // Launch Razorpay payment modal
                    const options = {
                      key: data.rzp_key,
                      amount: data.amount,
                      currency: data.currency,
                      name: "StepUp Ecommerce",
                      description: "Purchase Description",
                      order_id: data.orderId,
                      handler: async function (response) {
                        // Send payment details to backend for verification
                        const verifyResponse = await fetch("/rzpVerifyPayment", {
                          method: "POST",
                          headers: { "Content-Type": "application/json" },
                          body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                          }),
                        });


                        const verifyData = await verifyResponse.json();

                        //proceed to plae the order
                        if (verifyData.success) {
                          Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Your payment is successfull..placing Order',
                          }).then(async () => {

                            console.log("payment success full proceeding to place order")

                            // // Process the order
                            const response = await fetch("/placeOrder", {
                              method: "POST",
                              headers: {
                                'Content-Type': 'application/json'
                              },
                              body: JSON.stringify(formData),
                            });
                            const data = await response.json();
                            console.log(data);

                            if (data.success) {
                              Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: `${data.message}`,
                              }).then(() => {
                                // Redirect to orders page
                                window.location.href = '/orders';
                              });
                            } else {
                              Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message,
                              });
                            }




                          })
                          // Redirect or update UI accordingly
                        } else {
                          Swal.fire({
                            icon: 'error',
                            title: 'failure',
                            text: 'Your payment is failed! Please try again.',
                          });
                        }

                      },
                      prefill: {
                        name: document.getElementById("fullName").value,
                        email: "customer@example.com", // Add email field to form if needed
                        contact: document.getElementById("phone").value,
                      },
                      theme: { color: "#3399cc" },
                    };
                    const rzp = new Razorpay(options);
                    rzp.open();
                  } else {

                    Swal.fire({
                      icon: 'error',
                      title: 'failure',
                      text: "Failed to create Razorpay order.",
                    });
                  }



                } else {
                  // // Process the order
                  const response = await fetch("/placeOrder", {
                    method: "POST",
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData),
                  });

                  const data = await response.json();
                  console.log(data);

                  if (data.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success',
                      text: `${data.message}`,
                    }).then(() => {
                      // Redirect to orders page
                      window.location.href = '/orders'; // Add your redirect URL
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message,
                    });
                  }
                }
              }
            }
            )
          }
        } catch (error) {

          console.log('unexpected error occured while form submission');
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message,
          });
        }
      });
    });
  </script>

  <script src="scripts/jquery-3.3.1.min.js"></script>
  <script src="scripts/jquery-ui.js"></script>
  <script src="scripts/popper.min.js"></script>
  <script src="scripts/bootstrap.min.js"></script>
  <script src="scripts/owl.carousel.min.js"></script>
  <script src="scripts/jquery.magnific-popup.min.js"></script>
  <script src="scripts/aos.js"></script>
  <script src="scripts/main.js"></script>
</body>

</html>